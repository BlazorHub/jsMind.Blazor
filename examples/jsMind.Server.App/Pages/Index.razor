@page "/"


<pre>SelectedNodeId = @_selectedNodeId</pre>
<pre>SelectedNodeIds = @string.Join(",", _selectedNodeIds)</pre>

<div>
    <label>MindMaps</label>
    <MindMapTreeContainer @ref="_myTreeNodeContainer"
                          Options="@_options"
                          Data="@_treeData"
                          OnSelectNode="@OnSelectTreeNode"
                          OnMultiSelectNodes="@OnMultiSelectNodes"
                          OnShow="@OnShowTree"
                          OnResize="@OnResize"
                          style="border:solid 1px blue; background:#f4f4f4;" />
</div>

@code
{
    private MindMapTreeContainer _myTreeNodeContainer;
    private string _selectedNodeId = "";
    private string[] _selectedNodeIds = new string[0];

    readonly MindMapOptions _options = new MindMapOptions
    {
        Editable = false,
        MultiSelect = true,
        Theme = MindMapThemes.Primary
    };

    readonly MindMapTreeData _treeData = new MindMapTreeData
    {
        RootNode = new MindMapTreeNode
        {
            Id = "root",
            Topic = "-Woodern Picture-",
            Children = new List<MindMapTreeNode>
{
                new MindMapTreeNode
                {
                    Id = "glass",
                    Topic = "Glass",
                    Direction = MindMapNodeDirection.Right,
                    Children = new List<MindMapTreeNode>()
        {
                        new MindMapTreeNode
                        {
                            Id = "glass.merchuet",
                            Topic = "Glass MERCHUET",
                            Direction = MindMapNodeDirection.Right,
                            Children = new List<MindMapTreeNode>()
                {
                                 new MindMapTreeNode
                                 {
                                     Id = "pos",
                                     Topic = "Pos",
                                     Direction = MindMapNodeDirection.Right,
                                     Children = new List<MindMapTreeNode>()
                         {
                                          new MindMapTreeNode
                                          {
                                              Id = "pos123",
                                              Topic = "Pos123",
                                              Direction = MindMapNodeDirection.Right,
                                          },
                                          new MindMapTreeNode
                                          {
                                              Id = "pos124",
                                              Topic = "Pos124",
                                              Direction = MindMapNodeDirection.Right,
                                          }
                                     }
                                 }
                            }
                        }
                    }
                },
                new MindMapTreeNode
                {
                    Id = "other.wood",
                    Topic = "Other Wood",
                    Children = new List<MindMapTreeNode>
        {
                        new MindMapTreeNode
                        {
                            Id = "other.wood.wordcompany",
                            Topic = "Other Wood Wood Company",
                            Children = new List<MindMapTreeNode>
                {
                                new MindMapTreeNode   {
                                    Id = "other.wood1",
                                    Topic = "Other Wood1",
                                    Children = new List<MindMapTreeNode>
                        {
                                        new MindMapTreeNode
                                        {
                                            Id = "undisclosed.source",
                                            Topic = "Undisclosed Source"
                                        },
                                     }
                                },
                                new MindMapTreeNode
                                {
                                    Id = "other.wood2",
                                    Topic = "Other Wood2",
                                    Children = new List<MindMapTreeNode>
                        {
                                        new MindMapTreeNode
                                        {
                                            Id = "undisclosed.source",
                                            Topic = "Undisclosed Source"
                                        },
                                    }
                                 },
                            }
                        },
                        new MindMapTreeNode
                        {
                            Id = "essentinal.oil",
                            Topic = "Essentinal Oil",
                            Children = new List<MindMapTreeNode>
                {
                                new MindMapTreeNode   {
                                    Id = "camelia",
                                    Topic = "camelia",
                                    Children = new List<MindMapTreeNode>
                        {
                                        new MindMapTreeNode
                                        {
                                            Id = "camelia.kiss.seed",
                                            Topic = "Camelia Kiss Seed"
                                        },
                                     }
                                },
                                new MindMapTreeNode
                                {
                                    Id = "raw.material",
                                    Topic = "Raw Material",

                                 },
                            }
                        },
                         new MindMapTreeNode
                         {
                             Id = "plywood",
                             Topic = "PlyWood",
                             Direction = MindMapNodeDirection.Right,
                         },
                         new MindMapTreeNode
                          {
                              Id = "Special.adfr",
                              Topic = "Special ADFR",
                              Direction = MindMapNodeDirection.Right
                          }
                    }
                },
                new MindMapTreeNode
                {
                    Id = "wood",
                    Topic = "Wood",
                    Direction = MindMapNodeDirection.Right,
                    Children = new List<MindMapTreeNode>
        {
                         new MindMapTreeNode
                         {
                             Id = "my.wood",
                             Topic = "My Wood"
                         },
                     }
                }
            }
        }
    };


    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    Task OnResize(ValueEventArgs<string> args)
    {
        System.Console.WriteLine($"OnResize for {args.Value}");

        return Task.CompletedTask;
    }

    async Task OnShowTree(ValueEventArgs<string> args)
    {
        System.Console.WriteLine($"OnShowTree for {args.Value}");
        if (_myTreeNodeContainer.Nodes is not null)
        {
            foreach (var node in _myTreeNodeContainer.Nodes)
            {
                System.Console.WriteLine($"Node : {node.Id} - {node.Topic}");
            }
        }


        var found = await _myTreeNodeContainer.GetNode("root");
        //var selected = new List<MindMapTreeNode>
        //{
        //    _treeData.RootNode,
        //    _treeData.RootNode.Children.Last()
        //};
        //await _myTreeNodeContainer.SelectNodes(selected);
        //_selectedNodeIds = selected.Select(n => n.Id).ToArray();

        await _myTreeNodeContainer.Expand();
    }

    void OnSelectTreeNode(MindMapSingleSelectEventArgs<MindMapTreeNode> args)
    {
        _selectedNodeId = args.Node != null ? args.Node.GetType().Name + " - " + args.Node.Id + " and selected = " + args.Selected : "/none/";
    }

    void OnMultiSelectNodes(MindMapMultiSelectEventArgs<MindMapTreeNode> args)
    {
        _selectedNodeId = args.Node != null ? args.Node.GetType().Name + " - " + args.Node.Id : "/none/";
        _selectedNodeIds = args.Nodes.Select(n => n.Id).ToArray();
    }

    void OnAddNode(MindMapAddNodeEventArgs<MindMapTreeNode> args)
    {
        StateHasChanged();
    }

    async Task AddTreeNode()
    {
        var newTreeNode = new MindMapTreeNode
        {
            Id = "newTreeId",
            Topic = "new Tree node"
        };

        await _myTreeNodeContainer.SetEditable(true);
        await _myTreeNodeContainer.AddNode(_treeData.RootNode, newTreeNode);
        await _myTreeNodeContainer.SetEditable(false);
    }

    async Task RemoveTreeNode()
    {
        var node = new MindMapTreeNode
        {
            Id = "newTreeId"
        };

        await _myTreeNodeContainer.SetEditable(true);
        await _myTreeNodeContainer.RemoveNode(node);
        await _myTreeNodeContainer.SetEditable(false);
    }

    async Task SelectTreeNode()
    {
        await _myTreeNodeContainer.SelectNode(_treeData.RootNode);
    }


    async Task ClearSelect()
    {
        await _myTreeNodeContainer.ClearSelect();
    }

    async Task CollapseTree()
    {
        await _myTreeNodeContainer.Collapse();
    }
}